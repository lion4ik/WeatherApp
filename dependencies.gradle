ext {
    def versions = [
            support                  : '28.0.0',
            constraint               : '1.1.3',  // https://dl.google.com/dl/android/maven2/com/android/support/constraint/group-index.xml
            archComponents           : '1.1.1',  // https://developer.android.com/topic/libraries/architecture/adding-components.html

            dagger                   : '2.17',   // https://github.com/google/dagger/releases

            timber                   : '4.7.1',  // https://github.com/JakeWharton/timber/releases

            cicerone                 : '4.0.0',  // https://github.com/terrakok/Cicerone

            coroutines               : '1.0.0-RC1', // https://github.com/Kotlin/kotlinx.coroutines
            retrofitCoroutinesAdapter : '0.9.2', // https://github.com/JakeWharton/retrofit2-kotlin-coroutines-adapter
            retrofit                 : '2.4.0',  // https://github.com/square/retrofit
            okhttp                   : '3.10.0', // https://github.com/square/okhttp
            gson                     : '2.8.2',  // https://github.com/google/gson/releases

            mockito                  : '2.21.0', // https://mvnrepository.com/artifact/org.mockito/mockito-core
            mockitoKotlin            : '2.0.0-RC1', // https://github.com/nhaarman/mockito-kotlin/releases
            jUnit                    : '4.12',
            androidRunner            : '1.0.2',  // https://developer.android.com/training/testing/junit-runner
            robolectric              : '3.8',     // https://github.com/robolectric/robolectric/releases
            googlePlayServices       : '16.0.0'
    ]

    def libs = [
            appCompat                : "com.android.support:appcompat-v7:${versions.support}",
            design                   : "com.android.support:design:${versions.support}",
            cardView                 : "com.android.support:cardview-v7:${versions.support}",
            constraintLayout         : "com.android.support.constraint:constraint-layout:${versions.constraint}",
            kotlinStdLib             : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion",
            dagger                   : "com.google.dagger:dagger:${versions.dagger}",
            daggerCompiler           : "com.google.dagger:dagger-compiler:${versions.dagger}",
            archCompExtensions       : "android.arch.lifecycle:extensions:${versions.archComponents}",
            archCompCompiler         : "android.arch.lifecycle:compiler:${versions.archComponents}",
            room                    : "android.arch.persistence.room:runtime:${versions.archComponents}",
            roomCompiler            : "android.arch.persistence.room:compiler:${versions.archComponents}",
            cicerone                 : "ru.terrakok.cicerone:cicerone:${versions.cicerone}",

            timber                   : "com.jakewharton.timber:timber:${versions.timber}",

            coroutines               : "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}",
            retrofitCoroutinesAdapter : "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:${versions.retrofitCoroutinesAdapter}",
            gson                     : "com.google.code.gson:gson:${versions.gson}",
            retrofit                 : "com.squareup.retrofit2:retrofit:${versions.retrofit}",
            retrofitConverterGson    : "com.squareup.retrofit2:converter-gson:${versions.retrofit}",
            okhttpLogging            : "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}",
            googlePlayServices       : "com.google.android.gms:play-services-maps:${versions.googlePlayServices}"
    ]

    def testLibs = [
            junit                    : "junit:junit:${versions.jUnit}",
            mockito                  : "org.mockito:mockito-inline:${versions.mockito}",
            mockitoKotlin            : "com.nhaarman.mockitokotlin2:mockito-kotlin:${versions.mockitoKotlin}",
            robolectric              : "org.robolectric:robolectric:${versions.robolectric}",
            archTestHelpers          : "android.arch.core:core-testing:${versions.archComponents}",

            androidRunner            : "com.android.support.test:runner:${versions.androidRunner}",
    ]

    def impl = "implementation"
    def apt = "kapt"
    def testImpl = "testImplementation"
    def api = "api"

    def modules = [
            repository               : ":repository",
            remote                   : ":remote",
            storage                  : ":storage",
            domain                   : ":domain",
            core                     : ":core"
    ]

    appDependencies = [
            [configuration: impl, dependency: project(modules.core)],
            [configuration: impl, dependency: project(modules.remote)],
            [configuration: impl, dependency: project(modules.storage)],
            [configuration: impl, dependency: project(modules.repository)],
            [configuration: impl, dependency: project(modules.domain)],
            [configuration: impl, dependency: libs.kotlinStdLib],

            [configuration: impl, dependency: libs.appCompat],
            [configuration: impl, dependency: libs.design],
            [configuration: impl, dependency: libs.cardView],
            [configuration: impl, dependency: libs.constraintLayout],

            [configuration: impl, dependency: libs.dagger],
            [configuration: apt, dependency: libs.daggerCompiler],

            [configuration: impl, dependency: libs.archCompExtensions],
            [configuration: apt, dependency: libs.archCompCompiler],
            [configuration: impl, dependency: libs.room],
            [configuration: apt, dependency: libs.roomCompiler],

            [configuration: impl, dependency: libs.cicerone],
            [configuration: impl, dependency: libs.coroutines],

            [configuration: impl, dependency: libs.timber],
            [configuration: impl, dependency: libs.googlePlayServices],

            [configuration: testImpl, dependency: testLibs.junit],
            [configuration: testImpl, dependency: testLibs.mockito],
            [configuration: testImpl, dependency: testLibs.mockitoKotlin],
            [configuration: testImpl, dependency: testLibs.robolectric],
            [configuration: testImpl, dependency: testLibs.archTestHelpers],
    ]

    coreDependencies = [
            [configuration: impl, dependency: libs.kotlinStdLib],
            [configuration: impl, dependency: libs.coroutines],
    ]

    domainDependencies = [
            [configuration: impl, dependency: project(modules.core)],
            [configuration: impl, dependency: libs.kotlinStdLib],

            [configuration: impl, dependency: libs.coroutines],
            [configuration: impl, dependency: libs.dagger],
            [configuration: apt, dependency: libs.daggerCompiler],
    ]

    repositoryDependencies = [
            [configuration: impl, dependency: project(modules.core)],
            [configuration: impl, dependency: libs.kotlinStdLib],

            [configuration: impl, dependency: libs.dagger],
            [configuration: apt, dependency: libs.daggerCompiler],
    ]

    remoteDependencies = [
            [configuration: impl, dependency: project(modules.core)],
            [configuration: impl, dependency: libs.kotlinStdLib],

            [configuration: impl, dependency: libs.coroutines],
            [configuration: impl, dependency: libs.retrofitCoroutinesAdapter],
            [configuration: impl, dependency: libs.retrofit],
            [configuration: impl, dependency: libs.retrofitConverterGson],
            [configuration: impl, dependency: libs.okhttpLogging],
            [configuration: impl, dependency: libs.gson],

            [configuration: impl, dependency: libs.dagger],
            [configuration: apt, dependency: libs.daggerCompiler],
    ]

    storageDependencies = [
            [configuration: impl, dependency: project(modules.core)],
            [configuration: impl, dependency: libs.kotlinStdLib],

            [configuration: impl, dependency: libs.room],
            [configuration: apt, dependency: libs.roomCompiler],
            [configuration: impl, dependency: libs.dagger],
            [configuration: apt, dependency: libs.daggerCompiler],
    ]
}